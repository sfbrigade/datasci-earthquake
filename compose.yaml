# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  frontend:
    build:
      context: .
    env_file:
      - .env
    ports:
      - 3000:3000
    depends_on:
      - backend
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    volumes:
      - ./app:/app
  backend:
    build:
      context: ./backend
    env_file:
      - .env
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - ENVIRONMENT=${ENVIRONMENT}
      - DOMAIN=${DOMAIN}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./backend:/app
  db:
    image: postgres
    env_file:
      - .env
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./backend/database:/docker-entrypoint-initdb.d # Mount the SQL scripts directory
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db-data:
