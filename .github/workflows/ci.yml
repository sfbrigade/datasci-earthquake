name: CI Pipeline

on:
  push:
    branches:
      - 262/pass-healthcheck
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master

jobs:
  eslint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Install Node.js dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  black_lint_and_mypy_type_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install black==24.10.0 mypy
          pip install fastapi pydantic pydantic-settings sqlalchemy GeoAlchemy2 pytest
      - name: Check code formatting with black
        run: black --check .

      - name: Type check with mypy
        run: mypy --config-file mypy.ini .

  docker_build_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get Run ID of Most Recent Successful Run
        id: get_run_id
        run: |
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sfbrigade/datasci-earthquake/actions/workflows/env_vars.yml/runs?status=completed&conclusion=success")
          run_id=$(echo $response | jq '.workflow_runs[0].id')
          echo "Run ID: $run_id"
          echo "run_id=$run_id" >> $GITHUB_ENV
      - name: Download .env Artifact
        uses: actions/download-artifact@v4
        with:
          name: encrypted-env-file
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: sfbrigade/datasci-earthquake
          run-id: ${{ env.run_id }}

      - name: Decrypt .env File
        run: |
          openssl aes-256-cbc -d -salt -pbkdf2 -k "${{ secrets.ARTIFACT_PASS }}" -in .env.enc -out .env
          echo "Decryption complete"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build Docker Containers
        run: docker compose build

      - name: Start Services
        run: docker compose up -d --wait --wait-timeout 190

      - name: Docker Logs 
        if: always()  
        run: |
          echo "Checking running containers..."
          docker ps -a
          echo "Logs for backend:"
          docker logs datasci-earthquake-backend-1 || echo "No logs found"

      - name: Run Backend Tests
        run: docker compose run backend pytest backend

      - name: Run Frontend Tests
        run: docker compose run frontend npm test

      - name: Clean Up
        run: docker compose down
